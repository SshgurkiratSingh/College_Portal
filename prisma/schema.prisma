generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//----------------------------------------------
// User & Account (Teacher accounts are Users)
//----------------------------------------------
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  DateOfBirth    DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastUpdated    DateTime?
  lastLogin      DateTime?
  accounts       Account[]

  // Teacher-created entities
  subjects          Subject[]           @relation("UserSubjects")
  projects          Project[]           @relation("UserProjects")
  studentLists      StudentList[]
  StudentListUpload StudentListUpload[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_set       Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//----------------------------------------------
// Fixed Outcome Codes as an Enum (12 PO and 3 PSO)
//----------------------------------------------
enum OutcomeCode {
  PO1
  PO2
  PO3
  PO4
  PO5
  PO6
  PO7
  PO8
  PO9
  PO10
  PO11
  PO12
  PSO1
  PSO2
  PSO3
}

//----------------------------------------------
// Subjects and Course Outcomes (CO)
//----------------------------------------------
model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String? // Optional subject code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The teacher who created the subject
  createdBy   User   @relation("UserSubjects", fields: [createdById], references: [id])
  createdById String @db.ObjectId

  // A subject can have many COs
  cos CO[]

  // Projects for this subject
  projects Project[]

}

model CO {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  subject     Subject @relation(fields: [subjectId], references: [id])
  subjectId   String  @db.ObjectId
  code        String // e.g., "CO1", "CO2", etc.
  description String?

  // Mapping of this CO to all fixed outcomes (POs and PSOs)
  coMappings COMapping[]

  // Questions (from project question papers) mapped to this CO
  projectQuestions ProjectQuestion[]
}

model COMapping {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Link to a subject CO
  co   CO     @relation(fields: [coId], references: [id])
  coId String @db.ObjectId

  // Outcome code (static, fixed outcomes)
  outcomeCode OutcomeCode

  // Level assigned (0 to 3)
  level Int
}

//----------------------------------------------
// Projects and Project Questions
//----------------------------------------------
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Subject
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId

  // Link to User (Teacher)
  user   User   @relation("UserProjects", fields: [userId], references: [id])
  userId String @db.ObjectId

  // Questions in this project
  questions ProjectQuestion[]
}

model ProjectQuestion {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String  @db.ObjectId
  questionNum Int // Question number (1, 2, 3...)
  maxMarks    Int // Maximum marks for this question
  description String? // Optional question description

  // Link to a CO
  co   CO?     @relation(fields: [coId], references: [id])
  coId String? @db.ObjectId
}
model StudentList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Name of the student list (e.g. "CSE 2023 Batch")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to User (Teacher)
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Removed subject relation

  // Students in this list
  students Student[]
}

model Student {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  rollNo  String  // Student roll number
  name    String  // Student name
  email   String? // Optional student email
  section String? // Optional section
  batch   String? // Optional batch

  // Link to StudentList
  studentList   StudentList @relation(fields: [studentListId], references: [id])
  studentListId String      @db.ObjectId
}

model StudentListUpload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String   // Original filename
  createdAt DateTime @default(now())

  // Link to User (Teacher)
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Removed subject relation
}

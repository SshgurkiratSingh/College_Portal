generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//----------------------------------------------
// User & Account (Teacher accounts are Users)
//----------------------------------------------
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  DateOfBirth    DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastUpdated    DateTime?
  lastLogin      DateTime?
  accounts       Account[]

  // Teacher-created entities
  subjects          Subject[]           @relation("UserSubjects")
  projects          Project[]           @relation("UserProjects")
  studentLists      StudentList[]
  StudentListUpload StudentListUpload[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_set       Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//----------------------------------------------
// Fixed Outcome Codes as an Enum (12 PO and 3 PSO)
//----------------------------------------------
enum OutcomeCode {
  PO1
  PO2
  PO3
  PO4
  PO5
  PO6
  PO7
  PO8
  PO9
  PO10
  PO11
  PO12
  PSO1
  PSO2
  PSO3
}

//----------------------------------------------
// Subjects and Course Outcomes stored as JSON
//----------------------------------------------
model Subject {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     User         @relation("UserSubjects", fields: [createdById], references: [id])
  createdById   String       @db.ObjectId
  
  /// Instead of a separate CO model, we now store course outcomes as JSON.
  /// Example JSON structure for courseOutcomes:
  /// [
  ///   {
  ///     "code": "CO1",
  ///     "description": "Understanding signals",
  ///     "mappings": { "PO1": 3, "PO2": 0, ..., "PSO3": 1 }
  ///   },
  ///   { ... }
  /// ]
  courseOutcomes Json?
  description    String?
  projects      Project[]
  studentList   StudentList? @relation("StudentListSubjects", fields: [studentListId], references: [id])
  studentListId String?      @db.ObjectId
}

model StudentList {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  students    Student[]
  subjects    Subject[] @relation("StudentListSubjects")
}

//----------------------------------------------
// Projects and Project Questions
//----------------------------------------------
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to Subject
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId

  // Link to User (Teacher)
  user   User   @relation("UserProjects", fields: [userId], references: [id])
  userId String @db.ObjectId

  // Questions in this project
  questions ProjectQuestion[]
}

model ProjectQuestion {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String  @db.ObjectId
  questionNum Int     // Question number (1, 2, 3...)
  maxMarks    Int     // Maximum marks for this question
  description String? // Optional question description

  /// Instead of linking to a CO, we store the CO code as a string.
  coCode      String?
}

model Student {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  rollNo  String  // Student roll number
  name    String  // Student name
  email   String? // Optional student email
  section String? // Optional section
  batch   String? // Optional batch

  // Link to StudentList
  studentList   StudentList @relation(fields: [studentListId], references: [id])
  studentListId String      @db.ObjectId
}

model StudentListUpload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String   // Original filename
  createdAt DateTime @default(now())

  // Link to User (Teacher)
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}
